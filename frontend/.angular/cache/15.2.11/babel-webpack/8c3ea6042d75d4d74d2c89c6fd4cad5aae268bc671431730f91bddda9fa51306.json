{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/fondo.service\";\nimport * as i2 from \"../services/cliente.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction BuscarAsociarFondosComponent_div_9_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"label\")(2, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_div_9_div_23_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const fondo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(fondo_r3.selected = $event);\n    })(\"change\", function BuscarAsociarFondosComponent_div_9_div_23_Template_input_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const fondo_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.onFondoChange(fondo_r3));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const fondo_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"fondo\", fondo_r3.fondoId, \"\");\n    i0.ɵɵproperty(\"ngModel\", fondo_r3.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", fondo_r3.nombreFondo, \" - \", fondo_r3.descripcion, \" - M\\u00EDnimo: \", i0.ɵɵpipeBind1(4, 5, fondo_r3.montoMinimo), \" \");\n  }\n}\nfunction BuscarAsociarFondosComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n    i0.ɵɵtext(2, \"Datos del Cliente\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\")(4, \"li\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"li\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"li\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"li\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"li\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"h3\");\n    i0.ɵɵtext(21, \"Fondos Disponibles para Suscribirse\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_div_9_Template_form_ngSubmit_22_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.asociarFondos());\n    });\n    i0.ɵɵtemplate(23, BuscarAsociarFondosComponent_div_9_div_23_Template, 5, 7, \"div\", 7);\n    i0.ɵɵelementStart(24, \"button\", 4);\n    i0.ɵɵtext(25, \"Asociar Fondos Seleccionados\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function BuscarAsociarFondosComponent_div_9_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.cancelarFondos());\n    });\n    i0.ɵɵtext(27, \"Cancelar Fondos Desmarcados\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"Tipo Identificaci\\u00F3n: \", ctx_r0.cliente.tipoIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"N\\u00FAmero Identificaci\\u00F3n: \", ctx_r0.cliente.numeroIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Nombres: \", ctx_r0.cliente.nombres, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Apellidos: \", ctx_r0.cliente.apellidos, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Email: \", ctx_r0.cliente.email, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tel\\u00E9fono: \", ctx_r0.cliente.telefono, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Preferencia de Notificaci\\u00F3n: \", ctx_r0.cliente.preferenciaNotificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Saldo Actual: \", ctx_r0.cliente.saldoActual, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fondosDisponibles);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.fondosDesmarcados.length === 0);\n  }\n}\nfunction BuscarAsociarFondosComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.clienteNoEncontradoMsg);\n  }\n}\nexport class BuscarAsociarFondosComponent {\n  constructor(fondoService, clienteService) {\n    this.fondoService = fondoService;\n    this.clienteService = clienteService;\n    this.numeroIdentificacion = '';\n    this.fondosDisponibles = [];\n    this.clienteNoEncontradoMsg = ''; // Mensaje para mostrar cuando el cliente no se encuentra\n    this.mensaje = '';\n    this.cliente = {\n      id: '',\n      nombres: '',\n      apellidos: '',\n      tipoIdentificacion: '',\n      numeroIdentificacion: '',\n      email: '',\n      telefono: '',\n      saldoActual: 0,\n      preferenciaNotificacion: '',\n      fondosSuscritos: [],\n      historialTransacciones: []\n    };\n  }\n  ngOnInit() {\n    this.obtenerFondosDisponibles(); // Llama al método getFondos() al iniciar el componente\n  }\n  /*getFondos(): void {\r\n    this.fondoService.getFondos().subscribe(\r\n      fondos => {\r\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\r\n      },\r\n      error => {\r\n        console.error('Error al obtener los fondos:', error);\r\n        // Manejo de errores, si es necesario\r\n      }\r\n    );\r\n  }*/\n  obtenerFondosDisponibles() {\n    this.fondoService.getFondos().subscribe(fondos => {\n      this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n    }, error => {\n      console.error('Error al obtener los fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n\n  marcarFondosSuscritos() {\n    if (this.cliente && this.cliente.fondosSuscritos) {\n      this.cliente.fondosSuscritos.forEach(fondoSuscrito => {\n        const fondo = this.fondosDisponibles.find(f => f.fondoId === fondoSuscrito.fondoId);\n        if (fondo) {\n          fondo.selected = true;\n        }\n      });\n    }\n  }\n  /*buscarCliente() {\r\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\r\n      this.cliente = response;\r\n    });\r\n  }  */\n  /* buscarCliente() {\r\n     this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\r\n       this.cliente = response;\r\n       this.marcarFondosSuscritos();\r\n     });\r\n   }*/\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      this.marcarFondosSuscritos();\n      this.clienteNoEncontradoMsg = ''; // Reinicia el mensaje de cliente no encontrado\n    }, error => {\n      console.error('Error al buscar cliente:', error);\n      if (error.error && error.error.message) {\n        this.clienteNoEncontradoMsg = error.error.message; // Establece el mensaje de cliente no encontrado desde el error\n      } else {\n        this.clienteNoEncontradoMsg = 'No se pudo encontrar al cliente.';\n      }\n      this.cliente = {\n        id: '',\n        nombres: '',\n        apellidos: '',\n        tipoIdentificacion: '',\n        numeroIdentificacion: '',\n        email: '',\n        telefono: '',\n        saldoActual: 0,\n        preferenciaNotificacion: '',\n        fondosSuscritos: [],\n        historialTransacciones: []\n      };\n      this.fondosDisponibles = []; // Reinicia los fondos disponibles\n    });\n  }\n  /*asociarFondos(): void {\r\n     const fondosSeleccionados: any[] = this.fondosDisponibles\r\n       .filter(fondo => fondo.selected)\r\n       .map(fondo => ({\r\n         fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\r\n         //montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\r\n         fechaSuscripcion: new Date().toISOString()\r\n       }));\r\n   \r\n     this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n       response => {\r\n         console.log('Fondos asociados', response);\r\n         this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n       },\r\n       error => {\r\n         console.error('Error al asociar fondos:', error);\r\n         // Manejo de errores, si es necesario\r\n       }\r\n     );\r\n   }*/\n  asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.fondoId,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados', response);\n      this.buscarCliente(); // Recargar los datos del cliente después de asociar fondos\n    }, error => {\n      console.error('Error al asociar fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n  /*cancelarFondos(clienteId: string, fondosACancelar: any[]) {\r\n    this.clienteService.cancelarFondos(clienteId, fondosACancelar).subscribe(\r\n      response => {\r\n        console.log('Fondos cancelados:', response);\r\n        // Manejo de la respuesta si es necesario\r\n      },\r\n      error => {\r\n        console.error('Error al cancelar fondos:', error);\r\n        // Manejo de errores si es necesario\r\n      }\r\n    );\r\n  }*/\n  cancelarFondos() {\n    if (this.fondosDesmarcados.length > 0) {\n      this.clienteService.cancelarFondos(this.cliente.id, this.fondosDesmarcados).subscribe(response => {\n        console.log('Fondos cancelados', response);\n        this.buscarCliente();\n      }, error => {\n        console.error('Error al cancelar fondos:', error);\n      });\n      this.fondosDesmarcados = []; // Reiniciar la lista de fondos desmarcados\n    }\n  }\n\n  onFondoChange(fondo) {\n    if (!fondo.selected) {\n      this.fondosDesmarcados.push({\n        fondoId: fondo.fondoId,\n        fechaSuscripcion: fondo.fechaSuscripcion // Utiliza la fecha específica de suscripción\n      });\n    } else {\n      // Eliminar fondo de la lista de desmarcados si se vuelve a marcar\n      this.fondosDesmarcados = this.fondosDesmarcados.filter(f => f.fondoId !== fondo.fondoId);\n    }\n  }\n  static #_ = this.ɵfac = function BuscarAsociarFondosComponent_Factory(t) {\n    return new (t || BuscarAsociarFondosComponent)(i0.ɵɵdirectiveInject(i1.FondoService), i0.ɵɵdirectiveInject(i2.ClienteService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BuscarAsociarFondosComponent,\n    selectors: [[\"app-buscar-asociar-fondos\"]],\n    decls: 11,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"ngSubmit\"], [\"for\", \"numeroIdentificacion\"], [\"id\", \"numeroIdentificacion\", \"name\", \"numeroIdentificacion\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"class\", \"container\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"content\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\", \"click\"], [1, \"content\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"name\", \"ngModelChange\", \"change\"]],\n    template: function BuscarAsociarFondosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Buscar Cliente y Asociar Fondos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.buscarCliente();\n        });\n        i0.ɵɵelementStart(4, \"label\", 2);\n        i0.ɵɵtext(5, \"N\\u00FAmero de Identificaci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.numeroIdentificacion = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵtext(8, \"Buscar\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(9, BuscarAsociarFondosComponent_div_9_Template, 28, 10, \"div\", 5);\n        i0.ɵɵtemplate(10, BuscarAsociarFondosComponent_div_10_Template, 3, 1, \"div\", 6);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.numeroIdentificacion);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.cliente && ctx.cliente.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.cliente || !ctx.cliente.id);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm, i3.CurrencyPipe],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    background-color: #f0f0f0;\\n    border: 1px solid #ccc;\\n    padding: 20px;\\n    margin: 10px;\\n  }\\n  \\n  .content[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnVzY2FyLWFzb2NpYXItZm9uZG9zL2J1c2Nhci1hc29jaWFyLWZvbmRvcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsWUFBWTtFQUNkOztFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgbWFyZ2luOiAxMHB4O1xuICB9XG4gIFxuICAuY29udGVudCB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","BuscarAsociarFondosComponent","constructor","fondoService","clienteService","id","nombres","apellidos","tipoIdentificacion","numeroIdentificacion","email","telefono","saldoActual","preferenciaNotificacion","fondosSuscritos","historialTransacciones","ngOnInit","obtenerFondosDisponibles","getFondos","subscribe","fondos","fondosDisponibles","error","console","marcarFondosSuscritos","cliente","forEach","fondoSuscrito","fondo","find","f","fondoId","selected","buscarCliente","buscarClientePorNumeroIdentificacion","response","clienteNoEncontradoMsg","message","asociarFondos","fondosSeleccionados","filter","map","fechaSuscripcion","Date","toISOString","log","cancelarFondos","fondosDesmarcados","length","onFondoChange","push","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.html","C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.ts"],"sourcesContent":["<!--<h2>Buscar Cliente y Asociar Fondos</h2>\n<div class=\"container\">\n  <form (ngSubmit)=\"buscarCliente()\">\n    <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n    <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n    <button type=\"submit\">Buscar</button>\n  </form>\n</div>\n\n<div *ngIf=\"cliente\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul>\n    <li>Tipo Identificación: {{ cliente.tipoIdentificacion }}</li>\n    <li>Número Identificación: {{ cliente.numeroIdentificacion }}</li>\n    <li>Nombres: {{ cliente.nombres }}</li>\n    <li>Apellidos: {{ cliente.apellidos }}</li>\n    <li>Email: {{ cliente.email }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    <li>Preferencia de Notificación: {{ cliente.preferenciaNotificacion }}</li>\n    <li>Saldo Actual: {{ cliente.saldoActual }}</li>\n  </ul>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\">\n        {{ fondo.nombreFondo }} - {{ fondo.descripcion }} - Mínimo: {{ fondo.montoMinimo | currency }}\n      </label>\n    </div>\n    <button type=\"submit\">Asociar Fondos Seleccionados</button>\n  </form>\n</div>\n\n<div *ngIf=\"!cliente && cliente !== undefined\">\n  <p>Cliente no encontrado.</p>\n</div>-->\n\n<h2>Buscar Cliente y Asociar Fondos</h2>\n<div class=\"container\">\n  <form (ngSubmit)=\"buscarCliente()\">\n    <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n    <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n    <button type=\"submit\">Buscar</button>\n  </form>\n</div>\n\n<div *ngIf=\"cliente && cliente.id\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul>\n    <li>Tipo Identificación: {{ cliente.tipoIdentificacion }}</li>\n    <li>Número Identificación: {{ cliente.numeroIdentificacion }}</li>\n    <li>Nombres: {{ cliente.nombres }}</li>\n    <li>Apellidos: {{ cliente.apellidos }}</li>\n    <li>Email: {{ cliente.email }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    <li>Preferencia de Notificación: {{ cliente.preferenciaNotificacion }}</li>\n    <li>Saldo Actual: {{ cliente.saldoActual }}</li>\n  </ul>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\" (change)=\"onFondoChange(fondo)\">\n        {{ fondo.nombreFondo }} - {{ fondo.descripcion }} - Mínimo: {{ fondo.montoMinimo | currency }}\n      </label>\n    </div>\n    <button type=\"submit\">Asociar Fondos Seleccionados</button>\n  </form>\n\n  <button (click)=\"cancelarFondos()\" [disabled]=\"fondosDesmarcados.length === 0\">Cancelar Fondos Desmarcados</button>\n</div>\n\n<div *ngIf=\"!cliente || !cliente.id\">\n  <p>{{ clienteNoEncontradoMsg }}</p>\n</div>\n","import { Component } from '@angular/core';\n\nimport { ClienteService } from '../services/cliente.service';\nimport { FondoService } from '../services/fondo.service';\n\nimport { Cliente } from '../models/cliente.model';\nimport { Fondo } from '../models/fondo.model';\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})\nexport class BuscarAsociarFondosComponent {\nnumeroIdentificacion: string = ''; \nfondosDisponibles: Fondo[] = [];\n\nclienteNoEncontradoMsg: string=''; // Mensaje para mostrar cuando el cliente no se encuentra\n\nmensaje: string = '';\ncliente: Cliente = {\n  id: '',\n  nombres: '',\n  apellidos: '',\n  tipoIdentificacion: '',\n  numeroIdentificacion: '',\n  email: '',\n  telefono: '',\n  saldoActual: 0,\n  preferenciaNotificacion: '',\n  fondosSuscritos: [],\n  historialTransacciones: []\n};\n\nconstructor(\n  private fondoService: FondoService,\n  private clienteService: ClienteService\n) { }\n\n  ngOnInit(): void {\n    this.obtenerFondosDisponibles(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  /*getFondos(): void {\n    this.fondoService.getFondos().subscribe(\n      fondos => {\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n      },\n      error => {\n        console.error('Error al obtener los fondos:', error);\n        // Manejo de errores, si es necesario\n      }\n    );\n  }*/\n\n    obtenerFondosDisponibles() {\n      this.fondoService.getFondos().subscribe(\n        fondos => {\n          this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n        },\n        error => {\n          console.error('Error al obtener los fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }\n\n    marcarFondosSuscritos() {\n      if (this.cliente && this.cliente.fondosSuscritos) {\n        this.cliente.fondosSuscritos.forEach(fondoSuscrito => {\n          const fondo = this.fondosDisponibles.find(f => f.fondoId === fondoSuscrito.fondoId);\n          if (fondo) {\n            fondo.selected = true;\n          }\n        });\n      }\n    }\n  \n  /*buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n    });\n  }  */\n\n   /* buscarCliente() {\n      this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n        this.cliente = response;\n        this.marcarFondosSuscritos();\n      });\n    }*/\n\n      buscarCliente() {\n        this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(\n          response => {\n            this.cliente = response;\n            this.marcarFondosSuscritos();\n            this.clienteNoEncontradoMsg = ''; // Reinicia el mensaje de cliente no encontrado\n          },\n          error => {\n            console.error('Error al buscar cliente:', error);\n            if (error.error && error.error.message) {\n              this.clienteNoEncontradoMsg = error.error.message; // Establece el mensaje de cliente no encontrado desde el error\n            } else {\n              this.clienteNoEncontradoMsg = 'No se pudo encontrar al cliente.';\n            }\n            this.cliente = {\n              id: '',\n              nombres: '',\n              apellidos: '',\n              tipoIdentificacion: '',\n              numeroIdentificacion: '',\n              email: '',\n              telefono: '',\n              saldoActual: 0,\n              preferenciaNotificacion: '',\n              fondosSuscritos: [],\n              historialTransacciones: []\n            };\n            this.fondosDisponibles = []; // Reinicia los fondos disponibles\n          }\n        );\n      }\n    \n    \n\n   /*asociarFondos(): void {\n      const fondosSeleccionados: any[] = this.fondosDisponibles\n        .filter(fondo => fondo.selected)\n        .map(fondo => ({\n          fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\n          //montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\n          fechaSuscripcion: new Date().toISOString()\n        }));\n    \n      this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n        response => {\n          console.log('Fondos asociados', response);\n          this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n        },\n        error => {\n          console.error('Error al asociar fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }*/\n\n      asociarFondos(): void {\n        const fondosSeleccionados: any[] = this.fondosDisponibles\n          .filter(fondo => fondo.selected)\n          .map(fondo => ({\n            fondoId: fondo.fondoId,\n            fechaSuscripcion: new Date().toISOString()\n          }));\n    \n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n          response => {\n            console.log('Fondos asociados', response);\n            this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n          },\n          error => {\n            console.error('Error al asociar fondos:', error);\n            // Manejo de errores, si es necesario\n          }\n        );\n      }\n    \n      /*cancelarFondos(clienteId: string, fondosACancelar: any[]) {\n        this.clienteService.cancelarFondos(clienteId, fondosACancelar).subscribe(\n          response => {\n            console.log('Fondos cancelados:', response);\n            // Manejo de la respuesta si es necesario\n          },\n          error => {\n            console.error('Error al cancelar fondos:', error);\n            // Manejo de errores si es necesario\n          }\n        );\n      }*/\n\n        cancelarFondos(): void {\n          if (this.fondosDesmarcados.length > 0) {\n            this.clienteService.cancelarFondos(this.cliente.id, this.fondosDesmarcados).subscribe(\n              response => {\n                console.log('Fondos cancelados', response);\n                this.buscarCliente();\n              },\n              error => {\n                console.error('Error al cancelar fondos:', error);\n              }\n            );\n            this.fondosDesmarcados = []; // Reiniciar la lista de fondos desmarcados\n          }\n        }\n      \n        onFondoChange(fondo: any): void {\n          if (!fondo.selected) {\n            this.fondosDesmarcados.push({\n              fondoId: fondo.fondoId,\n              fechaSuscripcion: fondo.fechaSuscripcion // Utiliza la fecha específica de suscripción\n            });\n          } else {\n            // Eliminar fondo de la lista de desmarcados si se vuelve a marcar\n            this.fondosDesmarcados = this.fondosDesmarcados.filter(f => f.fondoId !== fondo.fondoId);\n          }\n        }\n\n}\n        \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}