{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/fondo.service\";\nimport * as i2 from \"../services/cliente.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction BuscarAsociarFondosComponent_div_10_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"label\")(2, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_div_10_div_23_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const fondo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(fondo_r3.selected = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const fondo_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"fondo\", fondo_r3.fondoId, \"\");\n    i0.ɵɵproperty(\"ngModel\", fondo_r3.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", fondo_r3.nombreFondo, \" - \", fondo_r3.descripcion, \" - M\\u00EDnimo: \", i0.ɵɵpipeBind1(4, 5, fondo_r3.montoMinimo), \" \");\n  }\n}\nfunction BuscarAsociarFondosComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n    i0.ɵɵtext(2, \"Datos del Cliente\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\")(4, \"li\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"li\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"li\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"li\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"li\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"h3\");\n    i0.ɵɵtext(21, \"Fondos Disponibles para Suscribirse\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_div_10_Template_form_ngSubmit_22_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.asociarFondos());\n    });\n    i0.ɵɵtemplate(23, BuscarAsociarFondosComponent_div_10_div_23_Template, 5, 7, \"div\", 7);\n    i0.ɵɵelementStart(24, \"button\", 4);\n    i0.ɵɵtext(25, \"Asociar Fondos Seleccionados\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"Tipo Identificaci\\u00F3n: \", ctx_r0.cliente.tipoIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"N\\u00FAmero Identificaci\\u00F3n: \", ctx_r0.cliente.numeroIdentificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Nombres: \", ctx_r0.cliente.nombres, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Apellidos: \", ctx_r0.cliente.apellidos, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Email: \", ctx_r0.cliente.email, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tel\\u00E9fono: \", ctx_r0.cliente.telefono, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Preferencia de Notificaci\\u00F3n: \", ctx_r0.cliente.preferenciaNotificacion, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Saldo Actual: \", ctx_r0.cliente.saldoActual, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fondosDisponibles);\n  }\n}\nfunction BuscarAsociarFondosComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Cliente no encontrado.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class BuscarAsociarFondosComponent {\n  constructor(fondoService, clienteService) {\n    this.fondoService = fondoService;\n    this.clienteService = clienteService;\n    this.numeroIdentificacion = '';\n    this.fondosDisponibles = [];\n    this.fondosDesmarcados = [];\n    this.clienteNoEncontradoMsg = ''; // Mensaje para mostrar cuando el cliente no se encuentra\n    this.cancelarFondosButtonDisabled = true;\n    this.mensaje = '';\n    this.asociarFondosMsg = '';\n    this.cancelarFondosMsg = '';\n    this.cliente = {\n      id: '',\n      nombres: '',\n      apellidos: '',\n      tipoIdentificacion: '',\n      numeroIdentificacion: '',\n      email: '',\n      telefono: '',\n      saldoActual: 0,\n      preferenciaNotificacion: '',\n      fondosSuscritos: [],\n      historialTransacciones: []\n    };\n  }\n  ngOnInit() {\n    this.obtenerFondosDisponibles(); // Llama al método getFondos() al iniciar el componente\n  }\n  /*getFondos(): void {\r\n    this.fondoService.getFondos().subscribe(\r\n      fondos => {\r\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\r\n      },\r\n      error => {\r\n        console.error('Error al obtener los fondos:', error);\r\n        // Manejo de errores, si es necesario\r\n      }\r\n    );\r\n  }*/\n  obtenerFondosDisponibles() {\n    this.fondoService.getFondos().subscribe(fondos => {\n      this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n    }, error => {\n      console.error('Error al obtener los fondos:', error);\n      // Manejo de errores, si es necesario\n    });\n  }\n\n  marcarFondosSuscritos() {\n    if (this.cliente && this.cliente.fondosSuscritos) {\n      this.cliente.fondosSuscritos.forEach(fondoSuscrito => {\n        const fondo = this.fondosDisponibles.find(f => f.fondoId === fondoSuscrito.fondoId);\n        if (fondo) {\n          fondo.selected = true;\n        }\n      });\n    }\n  }\n  /*buscarCliente() {\r\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\r\n      this.cliente = response;\r\n    });\r\n  }  */\n  /* buscarCliente() {\r\n     this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\r\n       this.cliente = response;\r\n       this.marcarFondosSuscritos();\r\n     });\r\n   }*/\n  buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n      this.marcarFondosSuscritos();\n      this.clienteNoEncontradoMsg = '';\n      this.asociarFondosMsg = '';\n      this.cancelarFondosMsg = '';\n    }, error => {\n      console.error('Error al buscar cliente:', error);\n      if (error.error && error.error.message) {\n        this.clienteNoEncontradoMsg = error.error.message; // Establece el mensaje de cliente no encontrado desde el error\n      } else {\n        this.clienteNoEncontradoMsg = 'No se pudo encontrar al cliente.';\n      }\n      this.cliente = {\n        id: '',\n        nombres: '',\n        apellidos: '',\n        tipoIdentificacion: '',\n        numeroIdentificacion: '',\n        email: '',\n        telefono: '',\n        saldoActual: 0,\n        preferenciaNotificacion: '',\n        fondosSuscritos: [],\n        historialTransacciones: []\n      };\n      //this.fondosDisponibles = []; // Reinicia los fondos disponibles\n      this.fondosDisponibles.forEach(fondo => fondo.selected = false);\n    });\n  }\n  /*asociarFondos(): void {\r\n     const fondosSeleccionados: any[] = this.fondosDisponibles\r\n       .filter(fondo => fondo.selected)\r\n       .map(fondo => ({\r\n         fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\r\n         //montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\r\n         fechaSuscripcion: new Date().toISOString()\r\n       }));\r\n   \r\n     this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\r\n       response => {\r\n         console.log('Fondos asociados', response);\r\n         this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\r\n       },\r\n       error => {\r\n         console.error('Error al asociar fondos:', error);\r\n         // Manejo de errores, si es necesario\r\n       }\r\n     );\r\n   }*/\n  asociarFondos() {\n    const fondosSeleccionados = this.fondosDisponibles.filter(fondo => fondo.selected).map(fondo => ({\n      fondoId: fondo.fondoId,\n      fechaSuscripcion: new Date().toISOString()\n    }));\n    this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(response => {\n      console.log('Fondos asociados', response);\n      this.asociarFondosMsg = 'Fondos asociados exitosamente.';\n      this.buscarCliente();\n    }, error => {\n      console.error('Error al asociar fondos:', error);\n      this.asociarFondosMsg = 'Error al asociar fondos. Intente nuevamente.';\n    });\n  }\n  /*cancelarFondos(clienteId: string, fondosACancelar: any[]) {\r\n    this.clienteService.cancelarFondos(clienteId, fondosACancelar).subscribe(\r\n      response => {\r\n        console.log('Fondos cancelados:', response);\r\n        // Manejo de la respuesta si es necesario\r\n      },\r\n      error => {\r\n        console.error('Error al cancelar fondos:', error);\r\n        // Manejo de errores si es necesario\r\n      }\r\n    );\r\n  }*/\n  cancelarFondos() {\n    if (this.fondosDesmarcados.length > 0) {\n      this.clienteService.cancelarFondos(this.cliente.id, this.fondosDesmarcados).subscribe(response => {\n        console.log('Fondos cancelados', response);\n        this.cancelarFondosMsg = 'Fondos cancelados exitosamente.';\n        this.buscarCliente();\n      }, error => {\n        console.error('Error al cancelar fondos:', error);\n        this.cancelarFondosMsg = 'Error al cancelar fondos. Intente nuevamente.';\n      });\n      this.fondosDesmarcados = []; // Reiniciar la lista de fondos desmarcados\n      this.cancelarFondosButtonDisabled = true;\n    }\n  }\n  onFondoChange(fondo) {\n    if (!fondo.selected) {\n      this.fondosDesmarcados.push({\n        fondoId: fondo.fondoId,\n        fechaSuscripcion: fondo.fechaSuscripcion // Utiliza la fecha específica de suscripción\n      });\n    } else {\n      // Eliminar fondo de la lista de desmarcados si se vuelve a marcar\n      this.fondosDesmarcados = this.fondosDesmarcados.filter(f => f.fondoId !== fondo.fondoId);\n    }\n    this.cancelarFondosButtonDisabled = this.fondosDesmarcados.length === 0;\n  }\n  static #_ = this.ɵfac = function BuscarAsociarFondosComponent_Factory(t) {\n    return new (t || BuscarAsociarFondosComponent)(i0.ɵɵdirectiveInject(i1.FondoService), i0.ɵɵdirectiveInject(i2.ClienteService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BuscarAsociarFondosComponent,\n    selectors: [[\"app-buscar-asociar-fondos\"]],\n    decls: 13,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"ngSubmit\"], [\"for\", \"numeroIdentificacion\"], [\"id\", \"numeroIdentificacion\", \"name\", \"numeroIdentificacion\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"class\", \"container\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"content\", 4, \"ngFor\", \"ngForOf\"], [1, \"content\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"name\", \"ngModelChange\"]],\n    template: function BuscarAsociarFondosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"<\\n\");\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵtext(2, \"Buscar Cliente y Asociar Fondos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0)(4, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function BuscarAsociarFondosComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.buscarCliente();\n        });\n        i0.ɵɵelementStart(5, \"label\", 2);\n        i0.ɵɵtext(6, \"N\\u00FAmero de Identificaci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function BuscarAsociarFondosComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.numeroIdentificacion = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵtext(9, \"Buscar\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(10, BuscarAsociarFondosComponent_div_10_Template, 26, 9, \"div\", 5);\n        i0.ɵɵtemplate(11, BuscarAsociarFondosComponent_div_11_Template, 3, 0, \"div\", 6);\n        i0.ɵɵtext(12, \"--> \");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.numeroIdentificacion);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.cliente);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.cliente && ctx.cliente !== undefined);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm, i3.CurrencyPipe],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    background-color: #f0f0f0;\\n    border: 1px solid #ccc;\\n    padding: 20px;\\n    margin: 10px;\\n  }\\n  \\n  .content[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n  }\\n  .message[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    background-color: #f9f9f9;\\n  }\\n\\n  \\nform[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: 0 auto;\\n  padding: 20px;\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  background-color: #f9f9f9;\\n}\\n\\n\\n.cliente-details[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  padding: 0;\\n}\\n\\n.cliente-details[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n.cliente-details[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n  display: inline-block;\\n  width: 150px; \\n}\\n\\n\\n\\nform[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n\\nbutton[_ngcontent-%COMP%] {\\n  background-color: #4CAF50; \\n  color: white;\\n  padding: 10px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n}\\n\\n\\n.success-message[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  padding: 10px;\\n  background-color: #d4edda; \\n  color: #155724; \\n  border: 1px solid #c3e6cb; \\n  border-radius: 5px;\\n}\\n\\nbutton[disabled][_ngcontent-%COMP%] {\\n  background-color: #ccc; \\n  color: #999; \\n  cursor: not-allowed; \\n  opacity: 0.7; \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnVzY2FyLWFzb2NpYXItZm9uZG9zL2J1c2Nhci1hc29jaWFyLWZvbmRvcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsWUFBWTtFQUNkOztFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCO0VBQ0E7SUFDRSxnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix5QkFBeUI7RUFDM0I7O0VBRUEsK0JBQStCO0FBQ2pDO0VBQ0UsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQix5QkFBeUI7QUFDM0I7O0FBRUEsK0NBQStDO0FBQy9DO0VBQ0UscUJBQXFCO0VBQ3JCLFVBQVU7QUFDWjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixxQkFBcUI7RUFDckIsWUFBWSxFQUFFLHdDQUF3QztBQUN4RDs7O0FBR0EsMkNBQTJDO0FBQzNDO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBLDBCQUEwQjtBQUMxQjtFQUNFLHlCQUF5QixFQUFFLHlCQUF5QjtFQUNwRCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQSw0Q0FBNEM7QUFDNUM7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLHlCQUF5QixFQUFFLCtCQUErQjtFQUMxRCxjQUFjLEVBQUUsZ0NBQWdDO0VBQ2hELHlCQUF5QixFQUFFLHNCQUFzQjtFQUNqRCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxzQkFBc0IsRUFBRSw4QkFBOEI7RUFDdEQsV0FBVyxFQUFFLHdCQUF3QjtFQUNyQyxtQkFBbUIsRUFBRSxzQ0FBc0M7RUFDM0QsWUFBWSxFQUFFLHNCQUFzQjtBQUN0QyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIG1hcmdpbjogMTBweDtcbiAgfVxuICBcbiAgLmNvbnRlbnQge1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgLm1lc3NhZ2Uge1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XG4gIH1cblxuICAvKiBFc3RpbG9zIHBhcmEgZWwgZm9ybXVsYXJpbyAqL1xuZm9ybSB7XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XG59XG5cbi8qIEVzdGlsb3MgcGFyYSBsYSBsaXN0YSBkZSBkYXRvcyBkZWwgY2xpZW50ZSAqL1xuLmNsaWVudGUtZGV0YWlscyB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuLmNsaWVudGUtZGV0YWlscyBsaSB7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59XG5cbi5jbGllbnRlLWRldGFpbHMgbGkgbGFiZWwge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMTUwcHg7IC8qIEFqdXN0YSBlbCBhbmNobyBzZWfDg8K6biBzZWEgbmVjZXNhcmlvICovXG59XG5cblxuLyogRXN0aWxvcyBwYXJhIGxvcyBjYW1wb3MgZGVsIGZvcm11bGFyaW8gKi9cbmZvcm0gZGl2IHtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cblxuLyogRXN0aWxvcyBwYXJhIGVsIGJvdMODwrNuICovXG5idXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwOyAvKiBDb2xvciBkZSBmb25kbyB2ZXJkZSAqL1xuICBjb2xvcjogd2hpdGU7XG4gIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLyogRXN0aWxvcyBwYXJhIGVsIG1lbnNhamUgZGUgY29uZmlybWFjacODwrNuICovXG4uc3VjY2Vzcy1tZXNzYWdlIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q0ZWRkYTsgLyogQ29sb3IgZGUgZm9uZG8gdmVyZGUgY2xhcm8gKi9cbiAgY29sb3I6ICMxNTU3MjQ7IC8qIENvbG9yIGRlIHRleHRvIHZlcmRlIG9zY3VybyAqL1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzNlNmNiOyAvKiBCb3JkZSB2ZXJkZSBjbGFybyAqL1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG59XG5cbmJ1dHRvbltkaXNhYmxlZF0ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjOyAvKiBDb2xvciBkZSBmb25kbyBncmlzIGNsYXJvICovXG4gIGNvbG9yOiAjOTk5OyAvKiBDb2xvciBkZSB0ZXh0byBncmlzICovXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7IC8qIENhbWJpYSBlbCBjdXJzb3IgYSBcIm5vIHBlcm1pdGlkb1wiICovXG4gIG9wYWNpdHk6IDAuNzsgLyogT3BhY2lkYWQgcmVkdWNpZGEgKi9cbn1cblxuICBcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","BuscarAsociarFondosComponent","constructor","fondoService","clienteService","id","nombres","apellidos","tipoIdentificacion","numeroIdentificacion","email","telefono","saldoActual","preferenciaNotificacion","fondosSuscritos","historialTransacciones","ngOnInit","obtenerFondosDisponibles","getFondos","subscribe","fondos","fondosDisponibles","error","console","marcarFondosSuscritos","cliente","forEach","fondoSuscrito","fondo","find","f","fondoId","selected","buscarCliente","buscarClientePorNumeroIdentificacion","response","clienteNoEncontradoMsg","asociarFondosMsg","cancelarFondosMsg","message","asociarFondos","fondosSeleccionados","filter","map","fechaSuscripcion","Date","toISOString","log","cancelarFondos","fondosDesmarcados","length","cancelarFondosButtonDisabled","onFondoChange","push","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.html","C:\\fondo\\frontend\\src\\app\\buscar-asociar-fondos\\buscar-asociar-fondos.component.ts"],"sourcesContent":["<\n<h2>Buscar Cliente y Asociar Fondos</h2>\n<div class=\"container\">\n  <form (ngSubmit)=\"buscarCliente()\">\n    <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n    <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n    <button type=\"submit\">Buscar</button>\n  </form>\n</div>\n\n<div *ngIf=\"cliente\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul>\n    <li>Tipo Identificación: {{ cliente.tipoIdentificacion }}</li>\n    <li>Número Identificación: {{ cliente.numeroIdentificacion }}</li>\n    <li>Nombres: {{ cliente.nombres }}</li>\n    <li>Apellidos: {{ cliente.apellidos }}</li>\n    <li>Email: {{ cliente.email }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    <li>Preferencia de Notificación: {{ cliente.preferenciaNotificacion }}</li>\n    <li>Saldo Actual: {{ cliente.saldoActual }}</li>\n  </ul>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\">\n        {{ fondo.nombreFondo }} - {{ fondo.descripcion }} - Mínimo: {{ fondo.montoMinimo | currency }}\n      </label>\n    </div>\n    <button type=\"submit\">Asociar Fondos Seleccionados</button>\n  </form>\n</div>\n\n<div *ngIf=\"!cliente && cliente !== undefined\">\n  <p>Cliente no encontrado.</p>\n</div>-->\n\n<!--\n<h2>Buscar Cliente y Asociar Fondos</h2>\n<div class=\"container\">\n  <form (ngSubmit)=\"buscarCliente()\" #clienteForm=\"ngForm\">\n    <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n    <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n    <button type=\"submit\">Buscar</button>\n  </form>\n</div>\n\n<div *ngIf=\"cliente && cliente.id\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul class=\"cliente-details\">\n    <li>\n      <label>Tipo Identificación:</label>\n      {{ cliente.tipoIdentificacion }}\n    </li>\n    <li>\n      <label>Número Identificación:</label>\n      {{ cliente.numeroIdentificacion }}\n    </li>\n    <li>\n      <label>Nombres:</label>\n      {{ cliente.nombres }}\n    </li>\n    <li>\n      <label>Apellidos:</label>\n      {{ cliente.apellidos }}\n    </li>\n    <li>\n      <label>Email:</label>\n      {{ cliente.email }}\n    </li>\n    <li>\n      <label>Teléfono:</label>\n      {{ cliente.telefono }}\n    </li>\n    <li>\n      <label>Preferencia de Notificación:</label>\n      {{ cliente.preferenciaNotificacion }}\n    </li>\n    <li>\n      <label>Saldo Actual:</label>\n      {{ cliente.saldoActual }}\n    </li>\n  </ul>\n\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\"  #clienteForm=\"ngForm\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\" (change)=\"onFondoChange(fondo)\">\n        {{ fondo.nombreFondo }} - Monto de Suscripciòn: {{ fondo.montoMinimo | currency }}\n      </label>\n      </div>\n    <button type=\"submit\" [disabled]=\"!cancelarFondosButtonDisabled\">Asociar Fondos Seleccionados</button>\n  </form>\n\n  <button (click)=\"cancelarFondos()\" [disabled]=\"cancelarFondosButtonDisabled\">Cancelar Fondos Desmarcados</button>\n</div>\n\n<div *ngIf=\"asociarFondosMsg\" class=\"success-message\">\n  {{ asociarFondosMsg }}\n</div>\n\n<div *ngIf=\"cancelarFondosMsg\" class=\"success-message\">\n  {{ cancelarFondosMsg }}\n</div>\n\n<div *ngIf=\"!cliente || !cliente.id\" class=\"success-message\">\n  <p>{{ clienteNoEncontradoMsg }}</p>\n</div>\n\n\n<h2>Buscar Cliente y Asociar Fondos</h2>\n<div class=\"container\">\n  <form (ngSubmit)=\"buscarCliente()\"  #clienteForm=\"ngForm\">\n    <label for=\"numeroIdentificacion\">Número de Identificación:</label>\n    <input id=\"numeroIdentificacion\" [(ngModel)]=\"numeroIdentificacion\" name=\"numeroIdentificacion\" required>\n    <button type=\"submit\">Buscar</button>\n  </form>\n</div>\n\n<div *ngIf=\"cliente && cliente.id\" class=\"container\">\n  <h3>Datos del Cliente</h3>\n  <ul>\n    <li>Tipo Identificación: {{ cliente.tipoIdentificacion }}</li>\n    <li>Número Identificación: {{ cliente.numeroIdentificacion }}</li>\n    <li>Nombres: {{ cliente.nombres }}</li>\n    <li>Apellidos: {{ cliente.apellidos }}</li>\n    <li>Email: {{ cliente.email }}</li>\n    <li>Teléfono: {{ cliente.telefono }}</li>\n    <li>Preferencia de Notificación: {{ cliente.preferenciaNotificacion }}</li>\n    <li>Saldo Actual: {{ cliente.saldoActual }}</li>\n  </ul>\n</div>\n\n<div *ngIf=\"fondosDisponibles.length > 0\" class=\"container\">\n  <h3>Fondos Disponibles para Suscribirse</h3>\n  <form (ngSubmit)=\"asociarFondos()\"  #clienteForm=\"ngForm\">\n    <div *ngFor=\"let fondo of fondosDisponibles\" class=\"content\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"fondo.selected\" name=\"fondo{{ fondo.fondoId }}\" (change)=\"onFondoChange(fondo)\">\n        {{ fondo.nombreFondo }} - {{ fondo.descripcion }} - Mínimo: {{ fondo.montoMinimo | currency }}\n      </label>\n    </div>\n    <div style=\"display: flex; gap: 10px;\">\n      <button type=\"submit\" [disabled]=\"cancelarFondosButtonDisabled\">Asociar Fondos Seleccionados</button>\n      <button type=\"button\" (click)=\"cancelarFondos()\" [disabled]=\"cancelarFondosButtonDisabled\">Cancelar Fondos Desmarcados</button>\n    </div>\n  </form>\n</div>\n\n<div *ngIf=\"asociarFondosMsg\" class=\"success-message\">\n  {{ asociarFondosMsg }}\n</div>\n\n<div *ngIf=\"cancelarFondosMsg\" class=\"success-message\">\n  {{ cancelarFondosMsg }}\n</div>\n\n<div *ngIf=\"!cliente || !cliente.id\" class=\"success-message\">\n  <p>{{ clienteNoEncontradoMsg }}</p>\n</div>\n-->\n\n","import { Component } from '@angular/core';\n\nimport { ClienteService } from '../services/cliente.service';\nimport { FondoService } from '../services/fondo.service';\n\nimport { Cliente } from '../models/cliente.model';\nimport { Fondo } from '../models/fondo.model';\n\n\n@Component({\n  selector: 'app-buscar-asociar-fondos',\n  templateUrl: './buscar-asociar-fondos.component.html',\n  styleUrls: ['./buscar-asociar-fondos.component.css']\n})\nexport class BuscarAsociarFondosComponent {\nnumeroIdentificacion: string = ''; \nfondosDisponibles: Fondo[] = [];\nfondosDesmarcados: any[] = [];\nclienteNoEncontradoMsg: string=''; // Mensaje para mostrar cuando el cliente no se encuentra\ncancelarFondosButtonDisabled: boolean = true;\nmensaje: string = '';\nasociarFondosMsg: string = '';\ncancelarFondosMsg: string = '';\ncliente: Cliente = {\n  id: '',\n  nombres: '',\n  apellidos: '',\n  tipoIdentificacion: '',\n  numeroIdentificacion: '',\n  email: '',\n  telefono: '',\n  saldoActual: 0,\n  preferenciaNotificacion: '',\n  fondosSuscritos: [],\n  historialTransacciones: []\n};\n\nconstructor(\n  private fondoService: FondoService,\n  private clienteService: ClienteService\n) { }\n\n  ngOnInit(): void {\n    this.obtenerFondosDisponibles(); // Llama al método getFondos() al iniciar el componente\n  }\n\n  /*getFondos(): void {\n    this.fondoService.getFondos().subscribe(\n      fondos => {\n        this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n      },\n      error => {\n        console.error('Error al obtener los fondos:', error);\n        // Manejo de errores, si es necesario\n      }\n    );\n  }*/\n\n    obtenerFondosDisponibles() {\n      this.fondoService.getFondos().subscribe(\n        fondos => {\n          this.fondosDisponibles = fondos; // Asigna los fondos recibidos al array fondosDisponibles\n        },\n        error => {\n          console.error('Error al obtener los fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }\n\n    marcarFondosSuscritos() {\n      if (this.cliente && this.cliente.fondosSuscritos) {\n        this.cliente.fondosSuscritos.forEach(fondoSuscrito => {\n          const fondo = this.fondosDisponibles.find(f => f.fondoId === fondoSuscrito.fondoId);\n          if (fondo) {\n            fondo.selected = true;\n          }\n        });\n      }\n    }\n  \n  /*buscarCliente() {\n    this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n      this.cliente = response;\n    });\n  }  */\n\n   /* buscarCliente() {\n      this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(response => {\n        this.cliente = response;\n        this.marcarFondosSuscritos();\n      });\n    }*/\n\n      buscarCliente() {\n        this.clienteService.buscarClientePorNumeroIdentificacion(this.numeroIdentificacion).subscribe(\n          response => {\n            this.cliente = response;\n            this.marcarFondosSuscritos();\n            this.clienteNoEncontradoMsg = ''; \n            this.asociarFondosMsg = '';\n            this.cancelarFondosMsg = '';\n          },\n          error => {\n            console.error('Error al buscar cliente:', error);\n            if (error.error && error.error.message) {\n              this.clienteNoEncontradoMsg = error.error.message; // Establece el mensaje de cliente no encontrado desde el error\n            } else {\n              this.clienteNoEncontradoMsg = 'No se pudo encontrar al cliente.';\n            }\n            this.cliente = {\n              id: '',\n              nombres: '',\n              apellidos: '',\n              tipoIdentificacion: '',\n              numeroIdentificacion: '',\n              email: '',\n              telefono: '',\n              saldoActual: 0,\n              preferenciaNotificacion: '',\n              fondosSuscritos: [],\n              historialTransacciones: []\n            };\n            //this.fondosDisponibles = []; // Reinicia los fondos disponibles\n            this.fondosDisponibles.forEach(fondo => fondo.selected = false);\n          }\n        );\n      }\n    \n    \n\n   /*asociarFondos(): void {\n      const fondosSeleccionados: any[] = this.fondosDisponibles\n        .filter(fondo => fondo.selected)\n        .map(fondo => ({\n          fondoId: fondo.fondoId, // Accede a fondoId en lugar de id\n          //montoSuscrito: fondo.montoSuscrito, // Accede a montoSuscrito en lugar de monto\n          fechaSuscripcion: new Date().toISOString()\n        }));\n    \n      this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n        response => {\n          console.log('Fondos asociados', response);\n          this.buscarCliente();  // Recargar los datos del cliente después de asociar fondos\n        },\n        error => {\n          console.error('Error al asociar fondos:', error);\n          // Manejo de errores, si es necesario\n        }\n      );\n    }*/\n\n      asociarFondos(): void {\n        const fondosSeleccionados: any[] = this.fondosDisponibles\n          .filter(fondo => fondo.selected)\n          .map(fondo => ({\n            fondoId: fondo.fondoId,\n            fechaSuscripcion: new Date().toISOString()\n          }));\n    \n        this.clienteService.asociarFondos(this.cliente.id, fondosSeleccionados).subscribe(\n          response => {\n            console.log('Fondos asociados', response);\n            this.asociarFondosMsg = 'Fondos asociados exitosamente.';\n            this.buscarCliente();\n          },\n          error => {\n            console.error('Error al asociar fondos:', error);\n            this.asociarFondosMsg = 'Error al asociar fondos. Intente nuevamente.';\n          }\n        );\n      }\n    \n      /*cancelarFondos(clienteId: string, fondosACancelar: any[]) {\n        this.clienteService.cancelarFondos(clienteId, fondosACancelar).subscribe(\n          response => {\n            console.log('Fondos cancelados:', response);\n            // Manejo de la respuesta si es necesario\n          },\n          error => {\n            console.error('Error al cancelar fondos:', error);\n            // Manejo de errores si es necesario\n          }\n        );\n      }*/\n\n        cancelarFondos(): void {\n          if (this.fondosDesmarcados.length > 0) {\n            this.clienteService.cancelarFondos(this.cliente.id, this.fondosDesmarcados).subscribe(\n              response => {\n                console.log('Fondos cancelados', response);\n                this.cancelarFondosMsg = 'Fondos cancelados exitosamente.';\n                this.buscarCliente();\n              },\n              error => {\n                console.error('Error al cancelar fondos:', error);\n                this.cancelarFondosMsg = 'Error al cancelar fondos. Intente nuevamente.';\n              }\n            );\n            this.fondosDesmarcados = []; // Reiniciar la lista de fondos desmarcados\n            this.cancelarFondosButtonDisabled = true;\n          }\n        }\n      \n        onFondoChange(fondo: any): void {\n          if (!fondo.selected) {\n            this.fondosDesmarcados.push({\n              fondoId: fondo.fondoId,\n              fechaSuscripcion: fondo.fechaSuscripcion // Utiliza la fecha específica de suscripción\n            });\n          } else {\n            // Eliminar fondo de la lista de desmarcados si se vuelve a marcar\n            this.fondosDesmarcados = this.fondosDesmarcados.filter(f => f.fondoId !== fondo.fondoId);\n          }\n          this.cancelarFondosButtonDisabled = this.fondosDesmarcados.length === 0;\n        }\n\n}\n        \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}